#!/bin/sh
#
# Welcome to GitSync - a commit and push script for easy using git!
# Copyright (C) 2009: Daniel Blaschke and Rene Sedmik
# Copyright (C) 2010-2013: Daniel Blaschke
# Web: http://gitsync.sourceforge.net
#
# This script is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published
# by the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 USA.
#
# Last change: 2013-01-12
#
#############################################
# SCRIPT VERSION:
GITSYNC_VERSION="1.2.4"
#
#############################################
# DEFAULT OPTIONS:
#############################################
# recommended way of overriding: create a config-file 'gitsync.conf' 
# as described in the documentation (i.e. README and/or man-page)
GIT_SERVER="auto"
USE_EDITOR="no"
GIT_DIR=".git"
GARBAGE_COLLECT="yes"
CUSTOM_START_SCRIPT=""
CUSTOM_END_SCRIPT=""
VERBOSITY="on"
#
#############################################
# CODE:
#############################################

# check for git-installation
GIT_PATH="`which git`"
if [ "$GIT_PATH" = "" ] ; then 
 echo ""
 echo "ERROR: command 'git' not found! Please install the version control system 'git'"
 echo "from www.git-scm.com before using this script!"
 exit 1
fi

#### define functions to be used later in this script:
# function for reading config files
READCFG () {
 if [ "$GS_config" != "" ]; then
    GS_skip="0";
    GS_key="";
    for line in $(cat "$GS_config"); do
     if [ "$GS_key" = "GIT_SERVER" ]; then GIT_SERVER="$line"; fi;
     if [ "$GS_key" = "USE_EDITOR" ]; then USE_EDITOR="$line"; fi;
     if [ "$GS_key" = "GIT_DIR" ]; then GIT_DIR="$line"; fi;
     if [ "$GS_key" = "CUSTOM_START_SCRIPT" ]; then CUSTOM_START_SCRIPT="$line"; fi;
     if [ "$GS_key" = "CUSTOM_END_SCRIPT" ]; then CUSTOM_END_SCRIPT="$line"; fi;
     if [ "$GS_key" = "GARBAGE_COLLECT" ]; then GARBAGE_COLLECT="$line"; fi;
     if [ "$GS_key" = "VERBOSITY" ]; then VERBOSITY="$line"; fi;
     if [ "$GS_skip" = "0" ]; then
      GS_key=$line;
     else
      GS_skip="0";
     fi;
     if [ "$line" = "#" ]; then GS_skip="1"; fi;
    done
 fi
}

# function for calling git pull/push:
GITP () {
 if ! if [ "$VERBOSITY" != "off" ]; then 
     git $1; 
    else
     git $1 -q;
    fi; then
  echo "ERROR: 'git $1' returned an error."
  exit 2
 fi
}

# function for calling CUSTOM_START/END_SCRIPT:
SCRIPT () {
 GS_scriptlength=$1
 if [ "$1" != "" ] && [ "${#GS_scriptlength}" != "1" ] &&  [ "${#GS_scriptlength}" != "2" ]; then
  if test -x "./$1"; then
	if [ "$VERBOSITY" != "off" ]; then echo "Calling custom script '${PWD}/$1' ..."; fi;
	./$1
	if [ "$1" = "$CUSTOM_START_SCRIPT" ] && [ "$VERBOSITY" != "off" ]; then
	 echo "done."
	fi
  elif test -x "/$1"; then
	if [ "$VERBOSITY" != "off" ]; then echo "Calling custom script '$1' ..."; fi;
        /$1
        if [ "$1" = "$CUSTOM_START_SCRIPT" ] && [ "$VERBOSITY" != "off" ]; then
         echo "done."
        fi
  else
	echo "---------------------------------------"
	echo "WARNING: Unable to call your custom script '$1'."
	echo "Make sure it is present and executable!"
	echo "Skipping ..."
  fi
 elif [ "$1" != "" ]; then
  echo "WARNING: Name of custom script '$1' is too short, skipping..."
 fi
}

# function for invoking git commit:
GITC () {
 if [ "$GITADDLIST" = "" ]; then
  if [ "$1" = "" ]; then
   git commit -a 
  else
   git commit -a $1 "$2"
  fi
 else
  if [ "$2" = "" ]; then
   git commit
  else
   git commit $1 "$2"
  fi
 fi
}

# function for printing usage information:
USAGE () {
 echo "Syntax is (where all arguments are optional):"
 echo "gitsync -m 'commit Message' -f 'Files to add' /location/of/repository"
 echo "gitsync -h/--help displays this usage info and exits"
 echo "gitsync -v/--version prints version number and exits"
 exit 1
}

####


# parsing command line arguments
GITCOMM=""
GITADDLIST=""
GIT_REP="."

PARSE=""
PARSE_R="0"
PARSE_m="0"
PARSE_f="0"
for i
do
 if [ "$PARSE_R" = "1" ]; then PARSE_R="2"; fi
 if [ "$PARSE_R" = "0" ]; then PARSE_R="1"; fi
 if [ "$PARSE" = "-m" ] && [ "$i" != "-m" ] && [ "$i" != "-f" ] && [ "$PARSE_m" = "0" ]; then 
  GITCOMM=$i
  PARSE_R="0"
  PARSE_m="1"
 fi
 if [ "$PARSE" = "-f" ] && [ "$i" != "-m" ] && [ "$i" != "-f" ] && [ "$PARSE_f" = "0" ]; then 
  GITADDLIST=$i
  PARSE_R="0"
  PARSE_f="1"
 fi
 if [ "$PARSE_R" = "2" ]; then 
  echo "ERROR: invalid command line option '$PARSE $i'."
  USAGE
 fi
 PARSE=$i
done
if [ "$PARSE" != "" ] && [ "$PARSE" != "$GITCOMM" ] && [ "$PARSE" != "$GITADDLIST" ]; then GIT_REP=$PARSE; fi


# if only (or last) argument is -h/--help, print usage and exit
if [ "$GIT_REP" = "-h" ] || [ "$GIT_REP" = "--help" ]; then
 echo "------------------------------------------------------------"
 echo "GitSync $GITSYNC_VERSION - A synchronization script for git"
 echo "------------------------------------------------------------"
 USAGE
fi

# if only (or last) argument is -v/--version, print version number and exit
if [ "$GIT_REP" = "-v" ] || [ "$GIT_REP" = "--version" ]; then
 echo $GITSYNC_VERSION
 exit 0
fi

# entering the directory of the repository
if ! cd "$GIT_REP"; then 
 echo "ERROR: folder '$GIT_REP' does not exist. Possibly a mistyped command line argument?"
 USAGE
fi


# searching for custom GitSync-configuration file
GS_config=""
GS_config_all=""
if test -r "$HOME/gitsync.conf"; then GS_config="$HOME/gitsync.conf"; GS_config_all="$GS_config"; fi;
if test -r "$HOME/.gitsync.conf"; then GS_config="$HOME/.gitsync.conf"; GS_config_all="$GS_config"; fi;
READCFG
GS_config=""
if test -r "./gitsync.conf"; then GS_config="./gitsync.conf"; GS_config_all="$GS_config_all $GS_config"; fi;
READCFG
# if [ "$GS_config_all" != "" ] && [ "$VERBOSITY" != "off" ]; then echo "Config file(s) found: $GS_config_all"; fi;


# check values of variables for validity
GS_CONFIG_ERROR="no"
if [ "$GIT_SERVER" != "yes" ] && [ "$GIT_SERVER" != "no" ] && [ "$GIT_SERVER" != "auto" ]; then
 GS_CONFIG_ERROR="yes"
elif [ "$GARBAGE_COLLECT" != "yes" ] && [ "$GARBAGE_COLLECT" != "no" ]; then
 GS_CONFIG_ERROR="yes"
elif [ "$VERBOSITY" != "on" ] && [ "$VERBOSITY" != "off" ]; then
 GS_CONFIG_ERROR="yes"
fi
if [ "$GS_CONFIG_ERROR" = "yes" ]; then
 echo "ERROR: invalid GitSync-configuration!"
 echo "Please check config file(s) $GS_config_all;"
 echo "See GitSync manual for instructions."
 exit 1
fi

# check if we are in the correct directory
if [ "${PWD##*/}" = "$GIT_DIR" ]; then cd ..; fi
if [ ! -r ./$GIT_DIR/config ]; then
   echo "ERROR: folder '${PWD}' is not a valid git repository! Use 'git init' to create one - for details see manual of git."
   USAGE
   exit 1
fi

# warn if GitSync is run as root
if [ $(id -ru) -eq 0 ]; then
 echo "WARNING: you are running this script as 'root'."
 if [ "$CUSTOM_START_SCRIPT" != "" ] || [ "$CUSTOM_END_SCRIPT" != "" ]; then
  echo "Custom scripts to be called are set to '$CUSTOM_START_SCRIPT' and '$CUSTOM_END_SCRIPT', and current directory is ${PWD}."
 fi
 echo "Are you sure you want continue?"
 echo "y/[n]"
 read GS_security_question
 if [ "$GS_security_question" != "y" ]; then 
	echo "Aborted by user."
	exit 3
 fi
fi

# if USE_EDITOR is set to the name of an editor, use it
if [ "$USE_EDITOR" != "yes" ] && [ "$USE_EDITOR" != "no" ]; then
 EDITOR_PATH="`which $USE_EDITOR`"
 if [ "$EDITOR_PATH" = "" ] ; then 
  echo "WARNING: editor '$USE_EDITOR' does not exist, falling back to system default."; 
 else
  export GIT_EDITOR=$USE_EDITOR
 fi
 USE_EDITOR="yes"
fi

# if present, calling custom "start" script first
SCRIPT "$CUSTOM_START_SCRIPT"

# if option GIT_SERVER="auto", check file .git/config to decide whether
# GIT_SERVER should be "yes" or "no":
if [ "$GIT_SERVER" = "auto" ]; then
 if [ "$(egrep 'remote' $GIT_DIR/config)" != "" ]; then
	GIT_SERVER="yes"
 else
	GIT_SERVER="no"
 fi
fi

# check if commit is necessary, else exit after syncing with server
if [ "$VERBOSITY" != "off" ]; then  echo "Checking repository status ..."; fi;
if [ "$(git status | grep 'nothing to commit')" != "" ]; then
  if [ "$GIT_SERVER" = "yes" ]; then
	if [ "$VERBOSITY" != "off" ]; then echo "Nothing to commit - synchronizing with the global repository ..."; fi;
	GITP pull
	GITP push
	# if present, calling custom "end" script before exiting
	SCRIPT "$CUSTOM_END_SCRIPT"
  else
	if [ "$VERBOSITY" != "off" ]; then echo "Nothing to commit (working directory clean)."; fi;
  fi
	exit 0
fi

# adding new files to the local repository
if ! if [ "$GITADDLIST" = "" ]; then
	git add .
   else
	git add -v $GITADDLIST
   fi; then
  echo "ERROR: 'git add' returned an error."
  exit 2
fi

# committing the local changes
if [ "$VERBOSITY" != "off" ]; then echo "Committing all of your changes ..."; fi;

if if [ "$GITCOMM" = "" ]; then 
	  if [ "$USE_EDITOR" = "yes" ]; then
		GITC
	  else
		echo "Please type your comment: "
		read gitcomment
		GITC -m "$gitcomment"
	  fi
   else
	  GITC -m "$GITCOMM"
   fi; then
  if [ "$GARBAGE_COLLECT" = "yes" ]; then
   git gc --auto
  fi

else
  echo "ERROR: 'git commit' returned an error - Aborting."
  git reset -q
  exit 2
fi

if [ "$GIT_SERVER" = "yes" ]; then
# initiating a pull to achieve a consistent local repository before pushing
 if [ "$VERBOSITY" != "off" ]; then echo "Synchronizing with the global repository ..."; fi;
 GITP pull
 GITP push
fi

# if present, calling custom "end" script before exiting
SCRIPT "$CUSTOM_END_SCRIPT"

echo "done."

exit 0
# end of script
